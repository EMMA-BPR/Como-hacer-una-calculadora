{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyM5SrV7FnT4HwCna09etaE3",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/EMMA-BPR/Como-hacer-una-calculadora/blob/main/ejercicios%20derecho%20a%20examen%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7qUZzGTlZYMR",
        "outputId": "34f16cfc-1d6c-467b-9b5f-ee70e9206a1e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "introduce una cadena de caracteres:1513511\n",
            "1\n",
            "5\n",
            "1\n",
            "3\n",
            "5\n",
            "1\n",
            "1\n"
          ]
        }
      ],
      "source": [
        "#ejercicio 1\n",
        "cadena= input(\"introduce una cadena de caracteres:\")\n",
        "for caracter in cadena:\n",
        "  print(caracter)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#ejercico 2\n",
        "cadena= input(\"ingrese una cadena:\")\n",
        "subcadena = input(\"ingrese una subcadena:\")\n",
        "#COMPROBAR Si la cadena comienza con la subcadena\n",
        "if cadena.startswith(subcadena):\n",
        "  print(\"la cadena empieza con la subcadena\")\n",
        "else:\n",
        "    print(\"la cadena no comienza con la subcadena ingresada.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dqxZwQRkbgQB",
        "outputId": "0d807b70-8460-4e4c-a14b-f11d75f21da7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ingrese una cadena:hola chicos\n",
            "ingrese una subcadena:hola\n",
            "la cadena empieza con la subcadena\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#ejercicio 3\n",
        "cadena = input(\"Introduce una cadena: \")\n",
        "caracter = input(\"Introduce un carácter: \")\n",
        "\n",
        "if len(caracter) == 1: # Validar que sea un solo carácter\n",
        "    contador = 0\n",
        "    for letra in cadena:\n",
        "        if letra == caracter:\n",
        "            contador += 1\n",
        "\n",
        "    print(f\"El carácter '{caracter}' aparece {contador} veces en la cadena.\")\n",
        "else:\n",
        "    print(\"Por favor introduce solo un carácter.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P8f9kF36iR0g",
        "outputId": "cedc9ec3-5014-460a-a7a7-b6f84ed4c4f4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Introduce una cadena: quiero tacos \n",
            "Introduce un carácter: o\n",
            "El carácter 'o' aparece 2 veces en la cadena.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#ejercicio 4\n",
        "texto = input(\"Ingresa una frase: \")\n",
        "\n",
        "# Dividir la cadena en palabras separadas por espacios\n",
        "palabras = texto.split()\n",
        "\n",
        "# Contar cuantas palabras hay en la cadena\n",
        "num_palabras = len(palabras)\n",
        "\n",
        "print(\"La frase tiene\", num_palabras, \"palabras.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xC1vrnsokubB",
        "outputId": "446d5ecb-f971-4ea3-d93a-5f1572ac6f3c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ingresa una frase: mira mis galletas\n",
            "La frase tiene 3 palabras.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#ejercicio 5\n",
        "nombre_completo = input(\"Ingresa tu nombre y apellidos: \")\n",
        "\n",
        "# Dividir el nombre completo en palabras separadas por espacios\n",
        "nombres = nombre_completo.split()\n",
        "\n",
        "# Obtener las iniciales de cada palabra y convertirlas a mayúsculas\n",
        "iniciales = [nombre[0].upper() for nombre in nombres]\n",
        "\n",
        "# Imprimir las iniciales juntas\n",
        "print(\"Las iniciales en mayúsculas son:\", ''.join(iniciales))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GtK2rgD3lf0g",
        "outputId": "afd3c746-03a8-47f5-ec0e-5c68b35ab839"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ingresa tu nombre y apellidos: Emmanuel Bernal Perez \n",
            "Las iniciales en mayúsculas son: EBP\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#ejercicio 6\n",
        "# Pedir al usuario que ingrese una cadena de caracteres\n",
        "cadena = input(\"Ingresa una cadena de caracteres: \")\n",
        "\n",
        "# Invertir la cadena utilizando slicing con paso negativo\n",
        "cadena_invertida = cadena[::-1]\n",
        "\n",
        "# Imprimir la cadena invertida\n",
        "print(\"Cadena invertida:\", cadena_invertida)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "A6ezqc8HlnV6",
        "outputId": "c24c718b-bec8-4d68-be40-7f9f4ef6cf7f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ingresa una cadena de caracteres: amor \n",
            "Cadena invertida:  roma\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#ejercicio 7\n",
        "cadena= input(\"ingresa una cadena:\")\n",
        "char1 = input(\"Ingresa el primer carácter para sustituir: \")\n",
        "char2 = input(\"Ingresa el otro carácter con el que quieres sustituirlo: \")\n",
        "\n",
        "if len(char1) == 1 and len(char2) == 1:\n",
        "    nueva_cadena = cadena.replace(char1, char2, 1)\n",
        "    print(\"La cadena resultante es:\", nueva_cadena)\n",
        "else:\n",
        "    print(\"Error: Debes ingresar un solo carácter para reemplazar.\")\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "c79Np53smXJz",
        "outputId": "4403760b-af8b-44c0-cb68-f8db42724992"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ingresa una cadena:holaaaaaaaa\n",
            "Ingresa el primer carácter para sustituir: o\n",
            "Ingresa el otro carácter con el que quieres sustituirlo: a\n",
            "La cadena resultante es: halaaaaaaaa\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#ejercicio 8\n",
        "# Solicitar las cadenas al usuario\n",
        "cadena = input(\"Ingrese una cadena: \")\n",
        "subcadena = input(\"Ingrese una subcadena a buscar: \")\n",
        "\n",
        "# Comprobar si la subcadena está en la cadena\n",
        "if subcadena in cadena:\n",
        "    print(\"La cadena ingresada contiene la subcadena ingresada.\")\n",
        "else:\n",
        "    print(\"La cadena ingresada no contiene la subcadena ingresada.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Pd93nsl6nDzp",
        "outputId": "343ec78c-5200-42a5-a5b5-718682c3a0d1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ingrese una cadena: comida de perro para gatos \n",
            "Ingrese una subcadena a buscar: gatos\n",
            "La cadena ingresada contiene la subcadena ingresada.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#EJERCICIOS DE ESTRUCTURAS ALTERNATIVAS\n",
        "# ejercicio 1\n",
        "num1 = input(\"Ingrese el primer número: \")\n",
        "num2 = input(\"Ingrese el segundo número: \")\n",
        "\n",
        "if num1 > num2:\n",
        "    print(\"El primer número es mayor que el segundo\")\n",
        "else:\n",
        "    print(\"El primer número no es mayor que el segundo\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NSazLtmGnfGa",
        "outputId": "7959ee81-1d93-4bdf-8e46-19b36685bb70"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ingrese el primer número: 1\n",
            "Ingrese el segundo número: 9\n",
            "El primer número no es mayor que el segundo\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#EJERCICIO 2\n",
        "num = int(input(\"Ingrese un número: \"))\n",
        "\n",
        "if num > 0:\n",
        "    print(\"El número es positivo\")\n",
        "elif num < 0:\n",
        "    print(\"El número es negativo\")\n",
        "else:\n",
        "    print(\"El número es 0\")\n",
        "\n",
        "    int"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tL0Lx-VSoBAS",
        "outputId": "f5f9c1c7-7e6f-4ba6-af73-9720b5dab448"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ingrese un número: 0\n",
            "El número es 0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#ejercicio 3\n",
        "nombre_usuario = input(\"Ingrese su nombre de usuario: \")\n",
        "contrasena = input(\"Ingrese su contraseña: \")\n",
        "\n",
        "# Comprobamos si el usuario y la contraseña son correctas\n",
        "if nombre_usuario == \"galletasdecoco\" and contrasena == \"lechefria\":\n",
        "    print(\"Has entrado al sistema\")\n",
        "else:\n",
        "    print(\"Error: Usuario o contraseña incorrectos\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nLDLuDHGo-7S",
        "outputId": "a1e05044-004d-4faa-9cc8-02d676dddb24"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ingrese su nombre de usuario: galletasdecoco\n",
            "Ingrese su contraseña: lechefria\n",
            "Has entrado al sistema\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#ejercicio 4\n",
        "# Programa que lee una cadena por teclado y comprueba si es una letra mayúscula\n",
        "cadena = input(\"Ingrese una cadena: \")\n",
        "\n",
        "if len(cadena) == 1 and cadena.isupper():\n",
        "    print(\"La cadena ingresada es una letra mayúscula\")\n",
        "else:\n",
        "    print(\"La cadena ingresada no es una letra mayúscula o tiene más de un carácter\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i8SK_0d2ppu6",
        "outputId": "35498c17-28a6-4726-91fb-712374674edc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ingrese una cadena: H\n",
            "La cadena ingresada es una letra mayúscula\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#EJERCICIO 5\n",
        "numeros= [ ]\n",
        "\n",
        "for i in range(3):\n",
        "    numero = int(input(f\"Ingrese el número {i+1}: \"))\n",
        "    numeros.append(numero)\n",
        "\n",
        "numeros.sort(reverse=True)\n",
        "\n",
        "print(\"Los números ordenados de mayor a menor son:\", numeros)\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "q5z2nRdLqNyZ",
        "outputId": "0e745d99-7b7d-4037-b440-a93604924edf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ingrese el número 1: 5\n",
            "Ingrese el número 2: 5\n",
            "Ingrese el número 3: 2\n",
            "Los números ordenados de mayor a menor son: [5, 5, 2]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#EJERCICIOS DE CARACTERES\n",
        "#EJERCICIO 1\n",
        "cadena = input(\"Introduce una cadena: \")\n",
        "for caracter in cadena:\n",
        "    print(caracter)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ngg1yrhqrWKa",
        "outputId": "509a3951-918b-4b5a-dd9e-b4d4d170f899"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Introduce una cadena: COMIDA\n",
            "C\n",
            "O\n",
            "M\n",
            "I\n",
            "D\n",
            "A\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#EJERCICIO 2\n",
        "frase = input(\"Introduce una frase: \")\n",
        "palabras = frase.split()\n",
        "numero_palabras = len(palabras)\n",
        "print(\"La frase tiene\", numero_palabras, \"palabras.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "E2ulGICGrnyZ",
        "outputId": "2575d98a-5bed-4d66-c127-07c7708f2ff9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Introduce una frase: ALLA DONDE VIVIA\n",
            "La frase tiene 3 palabras.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#EJERCICIO 3\n",
        "nombre_completo = input(\"Ingresa tu nombre y apellidos: \")\n",
        "\n",
        "nombres = nombre_completo.split()\n",
        "\n",
        "iniciales = [nombre[0].upper() for nombre in nombres]\n",
        "\n",
        "print(\"Las iniciales en mayúsculas son:\", ''.join(iniciales))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gUz_nKuwsK2S",
        "outputId": "ba43cad8-201b-49f5-cf62-0fadbba2d5fc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ingresa tu nombre y apellidos: EMMANUEL BERNAL PEREZ\n",
            "Las iniciales en mayúsculas son: EBP\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#EJERCICIOS DE BUCLE\n",
        "#EJERCICIO 1\n",
        "palabra = input(\"Introduce una palabra: \")\n",
        "for i in range(10):\n",
        "    print(palabra)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bV8uh0QtsXeS",
        "outputId": "73091313-82e3-4400-b7ec-a19035b0a346"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Introduce una palabra: molepoblano\n",
            "molepoblano\n",
            "molepoblano\n",
            "molepoblano\n",
            "molepoblano\n",
            "molepoblano\n",
            "molepoblano\n",
            "molepoblano\n",
            "molepoblano\n",
            "molepoblano\n",
            "molepoblano\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#EJERCICIO 2\n",
        "edad = int(input(\"¿Cuál es tu edad? \"))\n",
        "for i in range(1, edad+1):\n",
        "    print(\"Has cumplido\", i, \"años.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RHd9ybPoszXi",
        "outputId": "9e0810e3-2955-4b15-b220-f8a1b76cd7df"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "¿Cuál es tu edad? 18\n",
            "Has cumplido 1 años.\n",
            "Has cumplido 2 años.\n",
            "Has cumplido 3 años.\n",
            "Has cumplido 4 años.\n",
            "Has cumplido 5 años.\n",
            "Has cumplido 6 años.\n",
            "Has cumplido 7 años.\n",
            "Has cumplido 8 años.\n",
            "Has cumplido 9 años.\n",
            "Has cumplido 10 años.\n",
            "Has cumplido 11 años.\n",
            "Has cumplido 12 años.\n",
            "Has cumplido 13 años.\n",
            "Has cumplido 14 años.\n",
            "Has cumplido 15 años.\n",
            "Has cumplido 16 años.\n",
            "Has cumplido 17 años.\n",
            "Has cumplido 18 años.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#EJERCICIO 3\n",
        "numero = int(input(\"Introduce un número entero QUE SEA POSITIVO: \"))\n",
        "impares = [str(i) for i in range(1, numero+1) if i % 2 != 0]\n",
        "print(\", \".join(impares))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iYwv13ovtCLS",
        "outputId": "185161e2-5d89-4596-eb10-f20ef9e332f0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Introduce un número entero QUE SEA POSITIVO: 56\n",
            "1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#EJERCICIO 4\n",
        "# Pedir al usuario un número entero positivo\n",
        "numero = int(input(\"Introduce un número entero +: \"))\n",
        "\n",
        "if numero < 0:\n",
        "    print(\"El número ingresado no es positivo\")\n",
        "else:\n",
        "    # Realizar la cuenta atrás desde el número ingresado hasta 0\n",
        "    for i in range(numero, -1, -1):\n",
        "        if i == 0:\n",
        "            print(i)\n",
        "        else:\n",
        "            print(i, end=\", \")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O_JDUsVitk0D",
        "outputId": "bd963b1e-212f-49e2-f0c9-b8b43aaf71f8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Introduce un número entero +: 10\n",
            "10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#EJERCICIO 5\n",
        "def capital_obtenido(cantidad, interes_anual, años):\n",
        "    capital = cantidad\n",
        "    for i in range(años):\n",
        "        capital += capital * (interes_anual / 100)\n",
        "        print(f\"Año {i+1}: {round(capital, 2)}\")\n",
        "    return capital\n",
        "\n",
        "cantidad = float(input(\"Ingrese la cantidad a invertir: \"))\n",
        "interes_anual = float(input(\"Ingrese el interés anual en %: \"))\n",
        "años = int(input(\"Ingrese el número de años de la inversión: \"))\n",
        "\n",
        "capital_final = capital_obtenido(cantidad, interes_anual, años)\n",
        "\n",
        "print(f\"\\nCapital final obtenido después de {años} años: {round(capital_final, 2)}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "E3X28WN0uMSs",
        "outputId": "c02e7327-608c-47ac-e5b0-6338997826db"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ingrese la cantidad a invertir: 1000\n",
            "Ingrese el interés anual en %: 15\n",
            "Ingrese el número de años de la inversión: 2\n",
            "Año 1: 1150.0\n",
            "Año 2: 1322.5\n",
            "\n",
            "Capital final obtenido después de 2 años: 1322.5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#EJERCICIOS DE LISTAS\n",
        "#EJERCICIO 1\n",
        "materias = [\"Matemáticas, Física, colado, arq computacional, Lengua\"]\n",
        "\n",
        "print(\"materias obligatorias a cursar:\")\n",
        "for materia in materias:\n",
        "    print(materia)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nDlXm2U-uhR7",
        "outputId": "26661aa6-17f3-4f37-f9d3-dbeb737b6905"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "materias obligatorias a cursar:\n",
            "Matemáticas, Física, colado, arq computacional, Lengua\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#ejercicio 2\n",
        "lista_numeros_profa = [10, 45, 55, 76]\n",
        "print(lista_numeros_profa[3])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bI2E5H7ewYET",
        "outputId": "1e77d1b9-9601-4fd1-99e5-120cfbc16d02"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "76\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#ejercicio 3 encuentra los fallos\n",
        "lista_colores = [\"rojo, azul, verde, amarillo \" ]\n",
        "\n",
        "el gruion los corcehtes, el signo igual ="
      ],
      "metadata": {
        "id": "SRPRrlBZwuLy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#ejercicio 4\n",
        "print(\"\\033[34m\" + \"u\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ny_mA9BwxMlL",
        "outputId": "b837bf7a-5471-4acb-fcbe-69e7c42c3f74"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[34mu\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#ejercicio 5\n",
        "ciudadesMex= [\"Yucatan\", \"Morelia\", \"Toluca\", \"Ciudad de Mexico\", \"Monterrey\", \"cancun\", \"guadalajara\", \"Estado de mexico\" ]\n",
        "print(ciudadesMex[0])\n",
        "print(ciudadesMex[1])\n",
        "print(ciudadesMex[7])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mO80zsE5yp9y",
        "outputId": "1196fdee-8f6d-43e9-b0fd-8b8d18ea3096"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Yucatan\n",
            "Morelia\n",
            "estado de mexico\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#EJERCICIO 6\n",
        "lista_colores = [\"amarillo\", \"azul\", \"verde\", \"rojo\"]\n",
        "# Añadir \"gris\" antes de \"rojo\"\n",
        "lista_colores.insert(lista_colores.index(\"rojo\"), \"gris\")\n",
        "# Añadir \"naranja\" entre \"azul\" y \"verde\"\n",
        "lista_colores.insert(lista_colores.index(\"verde\"), \"naranja\")\n",
        "# Añadir \"rosa\" en ultimo lugar\n",
        "lista_colores.append(\"rosa\")\n",
        "\n",
        "print(lista_colores)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_tw7ACwMzMDy",
        "outputId": "daa54153-2d17-4579-a7d7-8ca5b30f386d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['amarillo', 'azul', 'naranja', 'verde', 'gris', 'rojo', 'rosa']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#ejrcicio 7\n",
        "lista_colores = [\"amarillo\", \"azul\", \"naranja\", \"verde\", \"rojo\", \"gris\", \"rosa\"]\n",
        "\n",
        "# Eliminar \"rojo\"\n",
        "lista_colores.pop(lista_colores.index(\"rojo\"))\n",
        "\n",
        "# Eliminar \"verde\"\n",
        "lista_colores.pop(lista_colores.index(\"verde\"))\n",
        "\n",
        "# Eliminar \"amarillo\"\n",
        "lista_colores.pop(lista_colores.index(\"amarillo\"))\n",
        "\n",
        "print(lista_colores)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RcKXTuQ70t67",
        "outputId": "a423954a-7333-4760-d0cc-37579b9da88b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['azul', 'naranja', 'gris', 'rosa']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#ejercicio 8\n",
        "lista_numeros = [10,45,356,10,10,10,46,67,45,10,10,43,10,65,10,10]\n",
        "\n",
        "# Ordenar de menor a mayor\n",
        "lista_numeros.sort()\n",
        "print(\"Lista ordenada de menor a mayor:\", lista_numeros)\n",
        "\n",
        "# Ordenar de mayor a menor\n",
        "lista_numeros.sort(reverse=True)\n",
        "print(\"Lista ordenada de mayor a menor:\", lista_numeros)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YZKVTvSo2Jec",
        "outputId": "47e3a474-5ebf-4f82-a730-4e220f5ec59e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Lista ordenada de menor a mayor: [10, 10, 10, 10, 10, 10, 10, 10, 10, 43, 45, 45, 46, 65, 67, 356]\n",
            "Lista ordenada de mayor a menor: [356, 67, 65, 46, 45, 45, 43, 10, 10, 10, 10, 10, 10, 10, 10, 10]\n"
          ]
        }
      ]
    }
  ]
}